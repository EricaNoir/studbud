{"mappings":"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","sources":["public/js/kanban.js"],"sourcesContent":["function createCourse() {\r\n  const courseForm = document.getElementById(\"addCourseForm\");\r\n  courseForm.style.visibility = \"visible\";\r\n}\r\n\r\n\r\n// select everything\r\n// select the todo-form\r\nconst todoForm = document.querySelector('.todo-form');\r\n// select the input box\r\nconst todoInput = document.querySelector('.todo-input');\r\n// select the <ul> with class=\"todoTasks\"\r\nconst todoTasks = document.querySelector('.todoTasks');\r\n\r\n// array which stores every todos\r\nlet todos = [];\r\n\r\n// add an eventListener on form, and listen for submit event\r\ntodoForm.addEventListener('submit', function(event) {\r\n  // prevent the page from reloading when submitting the form\r\n  event.preventDefault();\r\n  addTodo(todoInput.value); // call addTodo function with input box current value\r\n});\r\n\r\n// function to add todo\r\nfunction addTodo(item) {\r\n  // if item is not empty\r\n  if (item !== '') {\r\n    // make a todo object, which has id, name, and completed properties\r\n    const todo = {\r\n      id: Date.now(),\r\n      name: item,\r\n      completion: \"toDo\"\r\n    };\r\n\r\n    // then add it to todos array\r\n    todos.push(todo);\r\n    addToLocalStorage(todos); // then store it in localStorage\r\n\r\n    // finally clear the input box value\r\n    todoInput.value = '';\r\n  }\r\n}\r\n\r\n// function to render given todos to screen\r\nfunction renderTodos(todos) {\r\n  // clear everything inside <ul> with class=todoTasks\r\n  todoTasks.innerHTML = '';\r\n\r\n  // run through each item inside todos\r\n  todos.forEach(function(item) {\r\n    // check if the item is completed\r\n    const checked = item.completed ? 'checked': null;\r\n\r\n    // make a <li> element and fill it\r\n    // <li> </li>\r\n    const li = document.createElement('li');\r\n    // <li class=\"item\"> </li>\r\n    li.setAttribute('class', 'item');\r\n    // <li class=\"item\" data-key=\"20200708\"> </li>\r\n    li.setAttribute('data-key', item.id);\r\n    /* <li class=\"item\" data-key=\"20200708\"> \r\n          <input type=\"checkbox\" class=\"checkbox\">\r\n          Go to Gym\r\n          <button class=\"delete-button\">X</button>\r\n        </li> */\r\n    // if item is completed, then add a class to <li> called 'checked', which will add line-through style\r\n    if (item.completed === true) {\r\n      li.classList.add('checked');\r\n    }\r\n\r\n    li.innerHTML = `\r\n      ${item.name}\r\n      <button class=\"delete-button\">âœ•</button>\r\n    `;\r\n    // finally add the <li> to the <ul>\r\n    todoTasks.append(li);\r\n  });\r\n\r\n}\r\n\r\n// function to add todos to local storage\r\nfunction addToLocalStorage(todos) {\r\n  // conver the array to string then store it.\r\n  localStorage.setItem('todos', JSON.stringify(todos));\r\n  // render them to screen\r\n  renderTodos(todos);\r\n}\r\n\r\n// function helps to get everything from local storage\r\nfunction getFromLocalStorage() {\r\n  const reference = localStorage.getItem('todos');\r\n  // if reference exists\r\n  if (reference) {\r\n    // converts back to array and store it in todos array\r\n    todos = JSON.parse(reference);\r\n    renderTodos(todos);\r\n  }\r\n}\r\n\r\n// toggle the value to completed and not completed\r\nfunction toggle(id) {\r\n  todos.forEach(function(item) {\r\n    // use == not ===, because here types are different. One is number and other is string\r\n    if (item.id == id) {\r\n      // toggle the value\r\n      item.completed = !item.completed;\r\n    }\r\n  });\r\n\r\n  addToLocalStorage(todos);\r\n}\r\n\r\n// deletes a todo from todos array, then updates localstorage and renders updated list to screen\r\nfunction deleteTodo(id) {\r\n  // filters out the <li> with the id and updates the todos array\r\n  todos = todos.filter(function(item) {\r\n    // use != not !==, because here types are different. One is number and other is string\r\n    return item.id != id;\r\n  });\r\n\r\n  // update the localStorage\r\n  addToLocalStorage(todos);\r\n}\r\n\r\n// initially get everything from localStorage\r\ngetFromLocalStorage();\r\n\r\n// after that addEventListener <ul> with class=todoItems. Because we need to listen for click event in all delete-button and checkbox\r\ntodoTasks.addEventListener('click', function(event) {\r\n  // check if the event is on checkbox\r\n  if (event.target.type === 'checkbox') {\r\n    // toggle the state\r\n    toggle(event.target.parentElement.getAttribute('data-key'));\r\n  }\r\n\r\n  // check if that is a delete-button\r\n  if (event.target.classList.contains('delete-button')) {\r\n    // get id from data-key attribute's value of parent <li> where the delete-button is present\r\n    deleteTodo(event.target.parentElement.getAttribute('data-key'));\r\n  }\r\n});\r\n\r\n"],"names":[],"version":3,"file":"index.e9c18eda.js.map","sourceRoot":"/__parcel_source_root/"}